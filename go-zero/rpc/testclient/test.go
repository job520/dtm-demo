// Code generated by goctl. DO NOT EDIT!
// Source: test.proto

package testclient

import (
	"context"

	"demo/go-zero/rpc/types/test"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Reply = test.Reply
	Req   = test.Req

	Test interface {
		TransIn(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Reply, error)
		TransInCompensate(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Reply, error)
		TransOut(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Reply, error)
		TransOutCompensate(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Reply, error)
	}

	defaultTest struct {
		cli zrpc.Client
	}
)

func NewTest(cli zrpc.Client) Test {
	return &defaultTest{
		cli: cli,
	}
}

func (m *defaultTest) TransIn(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Reply, error) {
	client := test.NewTestClient(m.cli.Conn())
	return client.TransIn(ctx, in, opts...)
}

func (m *defaultTest) TransInCompensate(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Reply, error) {
	client := test.NewTestClient(m.cli.Conn())
	return client.TransInCompensate(ctx, in, opts...)
}

func (m *defaultTest) TransOut(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Reply, error) {
	client := test.NewTestClient(m.cli.Conn())
	return client.TransOut(ctx, in, opts...)
}

func (m *defaultTest) TransOutCompensate(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Reply, error) {
	client := test.NewTestClient(m.cli.Conn())
	return client.TransOutCompensate(ctx, in, opts...)
}
